<?php

/**
 * @file
 * Contains read_to_me.module.
 */

use Aws\Polly\PollyClient;
use Aws\Credentials\Credentials;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\media\Entity\Media;

/**
 * Implements hook_help().
 */
function read_to_me_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the read_to_me module.
    case 'help.page.read_to_me':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Amazon Polly Text to Speech') . '</p>';
      return $output;

    default:
  }
}

// Modifies node_article_edit_form.
/**
 * Implements hook_form_form_id_alter().
 */
function read_to_me_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

  // This section of the form used for converting body field to script.
  if ($form_state->getFormObject()->getOperation() == 'text_to_speak') {

    $form['field_message'] = [
      '#type' => 'item',
      '#title' => t('How to create the audio version'),
      '#markup' => t('Click the Copy button below to load the body field into the script. It will be converted to plain text. <br />The original body field will not be changed. Edit and save the script, then switch to the Audio tab to generate speech.'),
      '#weight' => 0,
    ];

    $form['copytexttoplain'] = [
      '#type' => 'submit',
      '#title' => t('Copy body to script field'),
      '#weight' => 3,
      '#value' => t('Copy'),
      '#ajax' => [
        'callback' => 'copytoplainmod',
        'wrapper' => 'edit-field-script-wrapper',
        'event' => 'click',
      ],
    ];

    $form['actions']['submit']['#submit'][] = '_read_to_me_node_submit_redirect';

    /**
     * {@inheritdoc}
     */
    function copytoplainmod(array &$form, FormStateInterface $form_state) {

      $currentNodeID = \Drupal::routeMatch()->getRawParameter('node');

      // Load current node.
      $node = Node::load($currentNodeID);

      // Get original body value.
      $originalbody = $node->get('body')->value;

      // Use Drupal function to convert body to plain text.
      $textproc = MailFormatHelper::htmlToText($originalbody);

      // Set form state to plain text version.
      $form_state->setValue('field_script', $textproc);

      // Set form field to new value.
      $form['field_script']['widget'][0]['value']['#value'] = $textproc;

      return $form['field_script'];

    }

  }

  // This section of the form used for converting script to audio file.
  if ($form_state->getFormObject()->getOperation() == 'generate_audio') {

    // Get current node id.
    $currentNodeID = \Drupal::routeMatch()->getRawParameter('node');

    // Load current node.
    $node = Node::load($currentNodeID);

    // Set audio title from node title.
    $audiotitle = $node->get('title')->value;
    // Convert to lower case.
    $audiotitle = preg_replace('@[^a-z0-9-]+@', '-', strtolower($audiotitle));
    // Get current date and time for media label.
    $createddate = new DrupalDateTime('now');
    $createddate = $createddate->format('Y-m-d_H-i');
    // Build media label.
    $audiotitle = $audiotitle . '_' . $createddate;

    $form['audiotitlelabel'] = [
      '#type' => 'textfield',
      '#title' => t('Filename for generated MP3 file'),
      '#weight' => 2,
      '#default_value' => $audiotitle,
    ];

    $form['plaintoaudio'] = [
      '#type' => 'submit',
      '#title' => t('Convert script to audio'),
      '#weight' => 3,
      '#value' => t('Convert'),
      '#submit' => ['convertoaudio'],
    ];

    /**
     * {@inheritdoc}
     */
    function convertoaudio($form, FormStateInterface $form_state) {

      $audiotitle = $form_state->getValues()['audiotitlelabel'];

      // Get current node id.
      $currentNodeID = \Drupal::routeMatch()->getRawParameter('node');

      // Load current node.
      $node = Node::load($currentNodeID);

      // Load the script field.
      $textproc = $node->get('field_script')->value;



      // Prepare to send file to Amazon Polly.
      $awsAccessKeyId = \Drupal::config('read_to_me.settings')->get('aws_access_key_id');
      $awsSecretKey = \Drupal::config('read_to_me.settings')->get('aws_secret_access_key');
      $s3bucket = \Drupal::config('read_to_me.settings')->get('s3bucket');
      $voice_selection = \Drupal::config('read_to_me.settings')->get('voice_selection');

      if (NULL !== \Drupal::config('read_to_me.settings')->get('voice_generation')) {
        $pollyengine = \Drupal::config('read_to_me.settings')
          ->get('voice_generation');
      }
      else {
        $pollyengine = 'standard';
      };
      if ($voice_selection === 'Kevin') {
        $pollyengine = 'neural';
      }

      $credentials = new Credentials($awsAccessKeyId, $awsSecretKey);
      $client      = new PollyClient([
        'version'     => '2016-06-10',
        'credentials' => $credentials,
        'region'      => 'us-east-1',
      ]);

      $result = $client->StartSpeechSynthesisTask([
        'Engine'             => $pollyengine,
        'OutputS3BucketName' => $s3bucket,
        'OutputFormat'       => 'mp3',
        'Text'               => $textproc,
        'TextType'           => 'text',
        'VoiceId'            => $voice_selection,
      ]);

      $resultData = $result->get('SynthesisTask');

      $media = Media::create([
        'bundle' => 'remote_audio',
        'uid' => \Drupal::currentUser()->id(),
        'field_media_audio_stream' => [$resultData['OutputUri']],
      ]);

      // Name and save the audio media file.
      $media->setName($audiotitle)
        ->setPublished(TRUE)
        ->save();

      // Attach the media entity (the audio file).
      $node->field_spoken_version->setValue([
        'target_id' => $media->id(),
      ]);

      // Save the node.
      $node->save();
    }

  }

}

// Sets up the custom form modes for creating scripts and converting to audio.
/**
 * Implements hook_entity_type_build().
 */
function read_to_me_entity_type_build(array &$entity_types) {
  $entity_types['node']->setFormClass('text_to_speak', 'Drupal\node\NodeForm');
  $entity_types['node']->setFormClass('generate_audio', 'Drupal\node\NodeForm');
}

/**
 * Form submit handler used for script edit tab.
 */
function _read_to_me_node_submit_redirect($form, &$form_state) {
  $nodeid = $form_state->getformObject()->getEntity()->id();
  $form_state->setRedirect('read_to_me.script.edit', ['node' => $nodeid]);
}
